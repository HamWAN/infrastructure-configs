---
- name: Define the mikrotik SSH port
  set_fact: mikrotik_port=22

- name: Redefine mikrotik SSH port if exists
  set_fact: mikrotik_port={{ ansible_port }}
  when: ansible_port is undefined or ansible_port|int < 1

- name: Define the mikrotik SSH user as ansible user if set
  set_fact: mikrotik_user={{ ansible_user }}
  when: ansible_user is not none

- name: Else, define the mikrotik SSH user as the current user
  set_fact: mikrotik_user={{ lookup('env', 'USER') }}
  when: mikrotik_user is not defined or mikrotik_user is none

- name: Set the desired user for future use
  set_fact: mikrotik_desired_user={{ mikrotik_user }}

- name: Define the mikrotik SSH host
  set_fact: mikrotik_host={{ ansible_host }}
  when: mikrotik_host is not defined or mikrotik_host is none

- name: Check if we can use rsa for ssh
  local_action: command ssh-keyscan -t rsa {{ mikrotik_host }}
  register: keyscan_rsa

- name: Add additional flags to handle
  set_fact: mikrotik_connect_flags="-oHostKeyAlgorithms=+ssh-dss"
  when: keyscan_rsa.stdout|length < 1

- name: Check to see if "admin" user can connect
  local_action: command sshpass -p "" ssh -p {{ mikrotik_port }} admin@{{ mikrotik_host }} {{ mikrotik_connect_flags }} "/system routerboard print"
  register: ansible_ssh_user_login_test
  ignore_errors: yes

- name: Switch to admin user if that worked
  set_fact: mikrotik_user=admin
  when: "'Permission denied' not in ansible_ssh_user_login_test.stderr"

- name: query device for hardware
  local_action: command ssh -p {{ mikrotik_port }} {{ mikrotik_user }}@{{ mikrotik_host }} {{ mikrotik_connect_flags }} "/system routerboard print"
  tags:
    - research
  register: routerboard_details

- name: Define router type
  set_fact: router_type="{{ routerboard_details['stdout_lines'][1].split()[-1] }}"

- name: Define architecture
  set_fact: routeros_architecture="mipsbe" #default to mipsbe

- name: Define architecture
  set_fact: routeros_architecture="mipsbe"
  when: "routerboard_details['stdout_lines'][3].split()[-1] == 'ar9344'"

- name: Define architecture
  set_fact: routeros_architecture="tile"
  when: "routerboard_details['stdout_lines'][3].split()[-1] == 'tilegx'"

- debug: msg={{router_type}}

- debug: msg=routerboard_details.stdout

- name: query device for health and version
  local_action: command ssh -p {{ mikrotik_port }} {{ mikrotik_user }}@{{ mikrotik_host }} -oHostKeyAlgorithms=+ssh-dss "/system resource print"
  tags:
    - research
  register: routeros_details

- debug: msg=routeros_details.stdout
