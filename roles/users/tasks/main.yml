---
# tasks file for users

#####
# "Kill Persistent SSH Connection" is an ugly, no good, horrible hack to enable testing.
# There is simply no way I can find to convince Molecule to not use persistent connections.
#
# The module "ansible.builtin.meta: reset_connection" is incompatible with "when:" clauses.
# None of the "use_persistent_connections: false" variables seem to work.
# As long as the delegated Molecule driver is in the Managed mode, it pulls in defaults that
# force persistent connections.  Re-implementing everything to not be in Managed mode may work.
#####

  # There may be an existing Persistent SSH from other commands.
  # Setting this task to failed_when: false, since it's speculative.
- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network
  failed_when: false

- name: Ensure groups exists
  become: true
  ansible.builtin.group:
    name: "{{ item }}"
  loop:
    - "{{ group_admin }}"
    - "{{ group_user }}"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Ensure sudo access for admin group
  become: true
  ansible.builtin.template:
    src: "sudoers.j2"
    dest: "/etc/sudoers.d/{{ group_admin }}"
    owner: "root"
    group: "root"
    mode: "0640"
    validate: "/usr/sbin/visudo -cf %s"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Ensure admins exist
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "{{ group_admin }}"
    shell: "/bin/bash"
  loop: "{{ users_admin | flatten(1) }}"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Ensure users exist
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "{{ group_user }}"
    shell: "/bin/bash"
  loop: "{{ users_user | flatten(1) }}"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Ensure ssh keys are present
  become: true
  ansible.posix.authorized_key:
    user: "{{ item }}"
    key: "{{ lookup(authorized_key_scheme, authorized_key_location + item + '.key') }}"
    exclusive: true
  loop: "{{ users_admin + users_user | flatten(1) }}"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Audit users in admin group
  ansible.builtin.getent:
    database: group
    key: "{{ group_admin }}"
- ansible.builtin.set_fact:
    users_to_purge: "{{ getent_group[group_admin][2].split(',') | difference(users_admin) }}"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Audit users in user group
  ansible.builtin.getent:
    database: group
    key: "{{ group_user }}"
- ansible.builtin.set_fact:
    users_to_purge: "{{ getent_group[group_user][2].split(',') | difference(users_user) + users_to_purge }}"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Purge extraneous users
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    remove: true
    state: absent
  loop: "{{ users_to_purge }}"

  # The previous task may not run, so there may be nothing to kill.
  # Setting this task to failed_when: false, since it's speculative.
- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network
  failed_when: false

- name: Check group management scope
  ansible.builtin.stat:
    path: "{{ group_managed_scope }}"
  register: scope

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network

- name: Get group management scope data
  when:
    - scope.stat.exists
    - scope.stat.isreg
  block:
    - ansible.builtin.slurp:
        src: "{{ group_managed_scope }}"
      register: scope_data
    - name: Kill Persistent SSH Connection
      local_action: >
        ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
        -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
      run_once: true
      with_items: "{{ play_hosts }}"
      when: test_flaky_network
    - ansible.builtin.set_fact:
        managed_groups: "{{ (scope_data['content'] | ansible.builtin.b64decode).splitlines() }}"
    - ansible.builtin.set_fact:
        groups_to_purge: "{{ managed_groups | difference([group_admin, group_user]) }}"
    - name: Purge unwanted groups
      become: true
      ansible.builtin.group:
        name: "{{ item }}"
        state: absent
      loop: "{{ groups_to_purge }}"

  # The previous task may not run, so there may be nothing to kill.
  # Setting this task to failed_when: false, since it's speculative.
- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network
  failed_when: false

- name: Check for old sudoers configs
  become: true
  ansible.builtin.stat:
    path: "{{ '/etc/sudoers.d/' + item }}"
  loop: "{{ groups_to_purge }}"
  register: sudoers

  # The previous task may not run, so there may be nothing to kill.
  # Setting this task to failed_when: false, since it's speculative.
- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network
  failed_when: false

- name: Purge old sudoers configs
  become: true
  ansible.builtin.file:
    path: "{{ item.stat.path }}"
    state: absent
  loop: "{{ sudoers.results }}"
  when:
    - item.stat.exists
    - item.stat.isreg

  # The previous task may not run, so there may be nothing to kill.
  # Setting this task to failed_when: false, since it's speculative.
- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network
  failed_when: false

- name: Ensure group management scope is configured
  become: true
  ansible.builtin.copy:
    dest: "{{ group_managed_scope }}"
    content: "{{ [group_admin, group_user] | join('\n') + '\n' }}"

- name: Kill Persistent SSH Connection
  local_action: >
    ansible.builtin.shell ssh -O exit {{ hostvars[item].ansible_host }}
    -o ControlPath=~/.ansible/cp/{{ hostvars[item].ansible_host }}-{{ hostvars[item].ansible_port }}-{{ hostvars[item].ansible_user }}
  run_once: true
  with_items: "{{ play_hosts }}"
  when: test_flaky_network
